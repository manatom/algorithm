"""
 최대힙과 최소힙을 함께 사용하여 중간값을 구하는 방법
 정렬된 수열을 중간값을 기준으로 둘로 나누면 중간값보다 작거나 같은 값의 수열a와  중간값보다 큰 값의 수열b로 나눌 수 있다.
  이때 만약 총 수열의 수가 짝수라면 a와 b의 수는 같을 것이고 홀수라면 a가 b보다 하나 더 많을 것이다.
  이 때 a의 수열은 중간값을 알기 위해서는 이들 모두를 정렬할 필요없이 a를 최댓값으로 가지는 최대힙으로 나타낼 수 있고
b는 중간 값보다 더 큰 값들을 가진 최소힙으로 나타낼 수 있다면 중간값과 바뀐 상태의 중간값을 알 수 있다.
 따라서 a와 b를 최대힙과 최소힙으로 구현한다.
 중간값을 찾을 때 가장 중요한 점은 a와 b의 원소차이가 1을 넘어서는 안된다는 점이다. a의 원소수 - b의 원소수 <= 1이어여지만 a의 최댓갑이 중간값일 수 있다.
 첫 원소를 대입할때 a와 b의 원소수는 0:0 이고 하나 차이가 날때마다 같은 수로 다시 만들 것이기 때문에 총 두가지 경우의 수만 가능하다.
 새롭게 추가되는 수를 num이라고 하기로 한다.
 1.만약 기존에 a가 b보다 하나 더 많은 상태였을 경우 - 이경우에는 b에 원소가 하나 추가되어 a의 원소수와 b의 원소수가 같아져야한다.
 b로 옮겨지는 값은 a의 최댓값과 num 중에 더 큰 값이다. 이를 위해 우선 num을 a에 삽입해서 a의 새로운 최댓값을 구한다.
  그리고 새로운 a의 최댓갑을 b로 옮겨 a와 b의 갯수를 같게 만든다.
 2.만약 기존에 a와 b의 원소수가 같은상태였을 경우 이 경우에는 a에 원소가 추가되어 a의 원소수가 b의 원소 수보다 하나 더 많은 상태가 되어야한다.
그런데 여기서 추가되어야하는 수는 num과 b의 최솟값 중 더 작은 수이다. 이를 찾기 위해 우선 num을 b에 삽입하여 새롭게 b의 최솟값을 구한뒤
이 최솟값을 a로 옮긴다. 그렇다면 이 옮겨지는 최솟값이 a의 최댓갑이 될 것이다.
이 두가지 모두 a의 최댓값이 수열의 중간값을 나타낼 수 있다.

"""
import sys
from heapq import *
maxheap = []
minheap = []
n = int(sys.stdin.readline())
for i in range(1,n+1):
    num = int(sys.stdin.readline())
    if i % 2 == 0:
        heappush(maxheap,-num)
        heappush(minheap,-heappop(maxheap))
    else:
        heappush(minheap,num)
        heappush(maxheap,-heappop(minheap))
    print(-maxheap[0])